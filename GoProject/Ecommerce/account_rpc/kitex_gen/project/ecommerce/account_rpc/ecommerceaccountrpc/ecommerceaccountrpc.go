// Code generated by Kitex v0.2.0. DO NOT EDIT.

package ecommerceaccountrpc

import (
	"context"
	"github.com/XiaoXinTao/goproject/account_rpc/kitex_gen/project/ecommerce/account_rpc"
	"github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

func serviceInfo() *kitex.ServiceInfo {
	return ecommerceAccountRpcServiceInfo
}

var ecommerceAccountRpcServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "EcommerceAccountRpc"
	handlerType := (*account_rpc.EcommerceAccountRpc)(nil)
	methods := map[string]kitex.MethodInfo{
		"VerifyUser": kitex.NewMethodInfo(verifyUserHandler, newEcommerceAccountRpcVerifyUserArgs, newEcommerceAccountRpcVerifyUserResult, false),
		"Login":      kitex.NewMethodInfo(loginHandler, newEcommerceAccountRpcLoginArgs, newEcommerceAccountRpcLoginResult, false),
		"Logout":     kitex.NewMethodInfo(logoutHandler, newEcommerceAccountRpcLogoutArgs, newEcommerceAccountRpcLogoutResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "account_rpc",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.2.0",
		Extra:           extra,
	}
	return svcInfo
}

func verifyUserHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*account_rpc.EcommerceAccountRpcVerifyUserArgs)
	realResult := result.(*account_rpc.EcommerceAccountRpcVerifyUserResult)
	success, err := handler.(account_rpc.EcommerceAccountRpc).VerifyUser(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEcommerceAccountRpcVerifyUserArgs() interface{} {
	return account_rpc.NewEcommerceAccountRpcVerifyUserArgs()
}

func newEcommerceAccountRpcVerifyUserResult() interface{} {
	return account_rpc.NewEcommerceAccountRpcVerifyUserResult()
}

func loginHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*account_rpc.EcommerceAccountRpcLoginArgs)
	realResult := result.(*account_rpc.EcommerceAccountRpcLoginResult)
	success, err := handler.(account_rpc.EcommerceAccountRpc).Login(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEcommerceAccountRpcLoginArgs() interface{} {
	return account_rpc.NewEcommerceAccountRpcLoginArgs()
}

func newEcommerceAccountRpcLoginResult() interface{} {
	return account_rpc.NewEcommerceAccountRpcLoginResult()
}

func logoutHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*account_rpc.EcommerceAccountRpcLogoutArgs)
	realResult := result.(*account_rpc.EcommerceAccountRpcLogoutResult)
	success, err := handler.(account_rpc.EcommerceAccountRpc).Logout(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEcommerceAccountRpcLogoutArgs() interface{} {
	return account_rpc.NewEcommerceAccountRpcLogoutArgs()
}

func newEcommerceAccountRpcLogoutResult() interface{} {
	return account_rpc.NewEcommerceAccountRpcLogoutResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) VerifyUser(ctx context.Context, req *account_rpc.VerifyUserRequest) (r *account_rpc.VerifyUserResponse, err error) {
	var _args account_rpc.EcommerceAccountRpcVerifyUserArgs
	_args.Req = req
	var _result account_rpc.EcommerceAccountRpcVerifyUserResult
	if err = p.c.Call(ctx, "VerifyUser", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Login(ctx context.Context, req *account_rpc.LoginRequest) (r *account_rpc.LoginResponse, err error) {
	var _args account_rpc.EcommerceAccountRpcLoginArgs
	_args.Req = req
	var _result account_rpc.EcommerceAccountRpcLoginResult
	if err = p.c.Call(ctx, "Login", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Logout(ctx context.Context, req *account_rpc.LogoutRequest) (r *account_rpc.LogoutResponse, err error) {
	var _args account_rpc.EcommerceAccountRpcLogoutArgs
	_args.Req = req
	var _result account_rpc.EcommerceAccountRpcLogoutResult
	if err = p.c.Call(ctx, "Logout", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
